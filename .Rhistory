setwd("C:/Users/PC/Desktop/UK")
rm(list=ls())
library(FedData)
library(raster)
library(rgdal)
library(sf)
library(tmap)
NLCD <- raster("NLCD2016_2021.tif")
A.O.I <- sf::st_read("Primary_Zone.shp")
A.O.I <- sf::as_Spatial(st_geometry(A.O.I),
IDs = as.character(1:nrow(A.O.I)))
AOI <- spTransform(A.O.I,
CRS("+proj=longlat +datum=WGS84 +no_defs"))
cropped_extent <- crop(NLCD, AOI)
ext <- extent(AOI)
r <- crop(NLCD, ext)
capa <- mask(r, AOI)
capa <- raster::mask(r, AOI)
class(capa)
legend<-pal_nlcd()
legend
paletap <- legend$color
Water <- legend$color[1]
Dev_urb <- legend$color[6]
Agriculture <- legend$color[18]
Grassland <- legend$color[13]
Upland_f <- legend$color[10]
Wetland_f <- legend$color[8]
E_W_Veg <- legend$color[20]
paleta3 <- c(Water, Dev_urb,Agriculture,
Grassland, Upland_f,Wetland_f,
E_W_Veg)
tm_shape(capa) +
tm_raster(style = "cont", title = " ",
palette = paletap, legend.show = F)+
tm_legend(outside = T) +
tm_graticules(col = "grey90")+
tm_scale_bar(position = c("left", "bottom"))+
tm_layout(main.title = "FLORIDA STUDY AREA CROPPED EXTENT",
title.size=3,
#title.position = c('right', 'top')
main.title.position = "CENTER"
) +
tm_facets(free.scales=T) +
tm_add_legend('symbol',
col = paleta3,
border.col = "grey40",
size = 1,
labels = c('Water',
'Developed/Urban',
"Agriculture",
"Grassland/Shrib",
"Upland Forest",
"Wetland Forest",
"Emergent Wetland Vegetation"
),
title=" ")
class(capa)
sf=st_as_sf(capa)
tifpath=system.file("NLCD2016_2021.tif", package = "stars")
tif=read_stars(tifpath)
library(stars)
tifpath=system.file("NLCD2016_2021.tif", package = "stars")
tif=read_stars(tifpath)
tif=stars::read_stars(tifpath)
library(stars)
tifpath=system.file("NLCD2016_2021.tif", package = "stars")
tif=stars::read_stars(tifpath)
tif=stars::read_stars(tifpath,proxy = T)
r = st_as_stars(st_as_stars(raster(capa)))
library(leaflet)
library(leafem)
leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
leafem:::addGeoRaster(
file = "NLCD2016_2021.tif"
, group = "test"
, layerId = "testid"
)
leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
leafem:::addGeoRaster(
file = "NLCD2016_2021.tif"
, group = "test"
, layerId = "testid"
)
leaflet() %>%
addProviderTiles("Esri.WorldImagery") %>%
leafem:::addGeoRaster(
file = "NLCD2016_2021.tif", group = "test", layerId = "testid"
)
leaflet(capa) %>%
addProviderTiles("Esri.WorldImagery") %>%
leafem:::addGeoRaster(
file = "NLCD2016_2021.tif", group = "test", layerId = "testid"
)
class(r)
map <- st_as_sf(r)
map$layer
class(map)
map$
mapa <- tm_shape(map)+
tm_fill(col = "layer", palette = paleta,
style = "kmeans", colorNA = "snow3", alpha = 0.5
)
paleta3 <- c(Water, Dev_urb,Agriculture,
Grassland, Upland_f,Wetland_f,
E_W_Veg)
map$
mapa <- tm_shape(map)+
tm_fill(col = "layer", palette = paleta3,
style = "kmeans", colorNA = "snow3", alpha = 0.5
)
View(map)
NLCD <- raster("NLCD2016_2021.tif")
sf=st_as_sf(NLCD)
NLCD <- raster("NLCD2016_2021.tif")
A.O.I <- sf::st_read("Primary_Zone.shp")
A.O.I <- sf::as_Spatial(st_geometry(A.O.I),
IDs = as.character(1:nrow(A.O.I)))
AOI <- spTransform(A.O.I,
CRS("+proj=longlat +datum=WGS84 +no_defs"))
cropped_extent <- crop(NLCD, AOI)
sf=st_as_sf(cropped_extent)
sf=st_as_sf(capa)
tifpath=system.file("NLCD2016_2021.tif", package = "stars")
tif=read_stars(tifpath)
NLCD <- raster("Caparo_18_09_2018_S2.tif")
A.O.I <- sf::st_read("Primary_Zone.shp")
A.O.I <- sf::as_Spatial(st_geometry(A.O.I),
IDs = as.character(1:nrow(A.O.I)))
AOI <- spTransform(A.O.I,
CRS("+proj=longlat +datum=WGS84 +no_defs"))
cropped_extent <- crop(NLCD, AOI)
NLCD <- raster("Caparo_18_09_2018_S2.tif")
A.O.I <- sf::st_read("Primary_Zone.shp")
A.O.I <- sf::as_Spatial(st_geometry(A.O.I),
IDs = as.character(1:nrow(A.O.I)))
AOI <- spTransform(A.O.I,
CRS("+proj=longlat +datum=WGS84 +no_defs"))
cropped_extent <- crop(NLCD, AOI)
NLCD <- raster("NLCD2016_2021.tif")
plot(NLCD)
plot(NLCD)
NLCD <- raster("Caparo_18_09_2018_S2.tif")
plot(NLCD)
A.O.I <- sf::st_read("Primary_Zone.shp")
A.O.I <- sf::as_Spatial(st_geometry(A.O.I),
IDs = as.character(1:nrow(A.O.I)))
AOI <- spTransform(A.O.I,
CRS("+proj=longlat +datum=WGS84 +no_defs"))
cropped_extent <- crop(NLCD, AOI)
